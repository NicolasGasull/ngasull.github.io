{"pageProps":{"locale":"fr","scope":{"date":"2020-08-06","slug":"pourquoi-docker","lang":"fr","title":"Pourquoi Docker ?","html":"<section class=\"doc-section level-1\"><h2 id=\"_pour_travailler_ensemble\">Pour travailler ensemble</h2><p>Tout le monde développe sur différentes machines. Il n’est pas rare que plusieurs collègues aient installé différentes version d’une même library, d’un package manager, du runtime de leur application…​ (cc node/npm 👋)</p>\n<p>Lorsque l’application de développement est dockerisée, tous les devs (et la prod !) sont soumis aux mêmes règles, ce qui évite le syndrôme de <em>\"mais ça marche sur mon PC\"</em> tout en réduisant la configuration nécessaire à installer l’environnement de dev. Voir juste après !</p></section>\n<section class=\"doc-section level-1\"><h2 id=\"_pour_moins_perdre_de_temps_à_configurer\">Pour moins perdre de temps à configurer</h2><p>La configuration, c’est du temps passé à ne pas être productif. Plus il y a d’environnements dans lesquels une application doit tourner, plus il y a de configuration à faire. Docker permet d’abstraire l’environnement dans lequel tourne l’application et donc de ne faire que le minimum nécessaire.</p>\n<p>Une conséquence notable : pour ajouter un service à la stack, plus forcément besoin d’apprendre en détails une technologie. Il suffit d’ajouter une image existante de celle-ci, et de simplement spécifier les variables d’environnement nécessaires. Par exemple, pour <a href=\"https://hub.docker.com/_/postgres/\">ajouter une database PostgreSQL</a>, il suffit au minimum de renseigner un root password et de monter un volume pour persister les données.</p></section>\n<section class=\"doc-section level-1\"><h2 id=\"_pour_séparer_les_problèmes\">Pour séparer les problèmes</h2><p>Comme chaque service est aussi simple que possible, chacun n’a que très peu de dépendances avec le reste du monde. On voit que, par nature, les conteneurs nous poussent à n’avoir que le minimum vital de dépendances entre services.</p>\n<p>Par dépendances, je pense en particulier à :</p>\n<div class=\"ulist\"><ul><li>Système, programmes, libraries installées</li><li>Configurations associées à ce setup</li><li>Volumes (fichiers)</li><li>Accès réseau</li></ul></div></section>\n<section class=\"doc-section level-1\"><h2 id=\"_pour_gérer_et_sécuriser_les_connexions_réseau\">Pour gérer et sécuriser les connexions réseau</h2><p>Car oui : c’est vite fait de faire fuiter le port d’une database, et <a href=\"https://www.bleepingcomputer.com/news/security/new-meow-attack-has-deleted-almost-4-000-unsecured-databases/\">quand elle n’est pas sécurisée c’est gênant</a> 😬</p>\n<p>L’idée est de penser un service comme une boîte noire qui expose un ou plusieurs ports. Les services communiquent entre eux grâce aux volumes montés en commun ou à travers des ports internes. En effet, les <a href=\"https://docs.docker.com/compose/networking/\">services appartenant à un même réseau</a> peuvent par défaut s’accéder entre eux.</p></section>\n<section class=\"doc-section level-1\"><h2 id=\"_pièges_et_trucs_à_savoir\">Pièges et trucs à savoir</h2><p>Sous Windows et Mac, les conteneurs tournent sur une VM. Du coup c’est lent, pas natif et les lectures/écritures disque peuvent ralentir l’édition de fichiers. La solution est simple : utilise Linux 😏 (ou un Windows/Mac puissant)</p>\n<p>Lorsqu’un même volume (dossier) est monté en écriture dans deux conteneurs à la fois, on peut se retrouver avec des comportements inattendus : chez moi, l’intégralité du dossier généré par un run de build disparaissait en même temps que le conteneur à la fin du run. Je recommande donc vivement de ne monter en écriture qu’un seul fichier ou dossier à la fois.</p>\n<p>C’est possible de ne partager en écriture qu’une partie d’une même arborescence commune. Par exemple, si <code>backend</code> et <code>frontend</code> partagent <code>code</code> en lecture mais que <code>backend</code> doit écrire dans <code>code/target</code> et <code>frontend</code> doit écrire dans <code>code/dist</code>, alors les volumes peuvent être surchargés comme ceci :</p>\n<div class=\"listing-block\"><pre class=\"highlightjs highlight\"><code class=\"language-yml hljs language-yaml\" data-lang=\"yml\"><span class=\"hljs-attr\">backend:</span>\n  <span class=\"hljs-attr\">volumes:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./code:/code:ro</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./code/target:/code/target</span>\n\n<span class=\"hljs-attr\">webapp:</span>\n  <span class=\"hljs-attr\">volumes:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./code:/code:ro</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./code/dist:/code/dist</span></code></pre></div>\n<p>Les images Docker peuvent vite prendre de l’espace disque. Mais avec le temps, la communauté opte de plus en plus pour des versions minimalistes de chaque image. Autrefois avec une version <em>slim</em> de Debian, et aujourd’hui souvent avec une version <a href=\"https://alpinelinux.org/about/\">Alpine Linux</a> qui permet aux images de faire moins de 10Mo de base ! Préfère-donc utiliser les tags <code>-alpine</code> de chaque image.</p>\n<p>Enfin, la gestion des permissions est déroutante au début. Docker tourne en root par défaut et a de bonnes raisons de le faire : autant dire que j’apprécie de pouvoir ouvrir les ports 80 ou 443 en dev comme en prod 🙂</p>\n<p>Pour mieux comprendre pourquoi et comment bien gérer ses permissions : <a href=\"/fr/blog/gerer-ses-permissions-avec-docker\">voir cet article</a>.</p></section>\n<section class=\"doc-section level-1\"><h2 id=\"_par_où_commencer\">Par où commencer?</h2><p>En prenant le temps de lire la doc dans l’ordre, tout ne peut que bien se passer :</p>\n<div class=\"olist arabic\"><ol class=\"arabic\"><li><a href=\"https://docs.docker.com/get-started/overview/\">Comprends Docker</a></li><li><a href=\"https://docs.docker.com/compose/\">Comprends docker compose</a> pour simplement faire cohabiter les services entre eux</li><li>Installe <a href=\"https://docs.docker.com/engine/install/\">docker</a> et <a href=\"https://docs.docker.com/compose/install/\">son plugin compose</a></li><li><a href=\"https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user\">Ajoute ton user au groupe <code>docker</code></a> pour piloter le daemon sans <code>sudo</code></li><li>C’est parti ! N’oublie pas de garder la configuration la plus simple possible.</li></ol></div>\n<details><summary>Exemple</summary><div class=\"content\"><p>Une stack complète React/Rust/PostgreSQL pourrait être lancée avec la simple config suivante à la racine d’un projet :</p>\n<div class=\"listing-block\"><pre class=\"highlightjs highlight\"><code class=\"language-yml hljs language-yaml\" data-lang=\"yml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"3\"</span>\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">db:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">postgres:alpine</span>\n    <span class=\"hljs-attr\">environment:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">POSTGRES_PASSWORD=yolo</span>\n    <span class=\"hljs-attr\">volumes:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./db/data:/var/lib/postgresql/data</span>\n  <span class=\"hljs-attr\">backend:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">rust:slim</span>\n    <span class=\"hljs-attr\">environment:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">PGHOST=db</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">PGDATABASE=monservice</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">PGUSER=root</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">PGPASSWORD=yolo</span>\n    <span class=\"hljs-attr\">volumes:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./backend/:/home/backend</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./webapp/:/home/webapp:ro</span>\n    <span class=\"hljs-attr\">command:</span> <span class=\"hljs-string\">cargo</span> <span class=\"hljs-string\">run</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">4000</span><span class=\"hljs-string\">:4000</span>\n  <span class=\"hljs-attr\">webapp:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">node:alpine</span>\n    <span class=\"hljs-attr\">environment:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">BACKEND_URL=http://backend:4000/</span>\n    <span class=\"hljs-attr\">volumes:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./webapp/:/home/webapp</span>\n    <span class=\"hljs-attr\">command:</span> <span class=\"hljs-string\">sh</span> <span class=\"hljs-string\">-c</span> <span class=\"hljs-string\">\"yarn install &amp;&amp; CI=true yarn start\"</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">80</span><span class=\"hljs-string\">:8080</span></code></pre></div>\n<p><code>docker compose up -d</code> et c’est parti directement sur <a href=\"http://localhost\">localhost</a> ! 💻</p></div></details></section>","categories":["devops"]}},"__N_SSG":true}