{"pageProps":{"locale":null,"scope":{"date":"2019-11-02","slug":"simply-efficiently-use-vim-multiple-files","lang":"en","title":"How to simply use vim across multiple files","html":"<section id=\"preamble\" aria-label=\"Preamble\"><p>Vim provides its own <strong>unique</strong> way to edit code. Discerning what makes it really different helps a lot figuring out why so many developers love vim. This article attempts to summarize these core concepts and provides a reasonable set of tips for an efficient use of <strong>vim across multiple files</strong>.</p>\n<p>Nowadays, developers that are invited to vim are being told to install all these cool plugins. Although most of these are very good, I believe <strong>plugins make vimâ€™s actual learning curve steeper</strong> than it should be. Some plugins disguise vim into vscode, reminding features like <a href=\"https://github.com/scrooloose/nerdtree\">file explorer toolbar</a> or <a href=\"https://github.com/mihaifm/bufstop\">tabs</a>.</p>\n<p>Because vim is harder to grasp when beginning, limiting the number of plugins is crucial. With its core concepts only, <strong>vim already comes with great power and great responsibility</strong>. People probably donâ€™t accept this well enough, at least I didnâ€™t and my resulting experience of vim has been years of trying to stick to it and falling back to another editor (or IDE). Itâ€™s time to transform this vim hassle into vim power!</p>\n<aside class=\"admonition-block note\" role=\"note\"><h6 class=\"block-title label-only\"><span class=\"title-label\">ðŸ“Ž Note: </span></h6><p>This article assumes the reader already has basic vim knowledge. When mentioning commands, <code>&lt;C-key&gt;</code> means <kbd class=\"keyseq\"><kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">key</kbd></kbd>. Capitalization of letters is meaningful as it implies pressing <em>shift</em> at the same time.</p></aside></section><nav id=\"toc\" class=\"toc\" role=\"doc-toc\"><h2 id=\"toc-title\">Summary</h2><ol class=\"toc-list level-1\"><li><a href=\"#_buffers\">Buffers</a><ol class=\"toc-list level-2\"><li><a href=\"#_opening_files\">Opening files</a></li><li><a href=\"#_explore_files\">Explore files</a></li><li><a href=\"#_navigating_across_buffers\">Navigating across buffers</a></li><li><a href=\"#_closing_buffers\">Closing buffers</a></li></ol></li><li><a href=\"#_windows\">Windows</a></li><li><a href=\"#_cheatsheet_tldr\">Cheatsheet <em>(tl;dr)</em></a></li></ol></nav>\n<section class=\"doc-section level-1\"><h2 id=\"_buffers\">Buffers</h2><p>First of all, itâ€™s time to <strong>forget about tabs</strong>. In vim, tabs are a power-user feature that may be useful for those who already master buffers and in very specific scenario. Buffers alone are more than enough. Also, no plugin will put vscodeâ€™s tabs in vim.</p>\n<p>Experienced vim users often refer to navigating through files as <em>flowing through buffers</em>. Indeed, when you need to access a piece of code, you just place your cursor in it to explore or edit it. There is <strong>no need to care about which buffer is open and where it is</strong>. Weâ€™ll see that with just a few commands we are able to keep as many buffers open as we like while still keep editing efficiently!</p>\n<section class=\"doc-section level-2\"><h3 id=\"_opening_files\">Opening files</h3><p><strong><code>:find path/file</code></strong> opens <code>path/file</code>. <code>:find</code> supports quick file search if we enable it, so letâ€™s run / add to .vimrc the following commands in order to get comfortable:</p>\n<div class=\"listing-block\"><pre class=\"highlightjs highlight\"><code class=\"language-vim hljs\" data-lang=\"vim\"><span class=\"hljs-keyword\">set</span> path+=*\n<span class=\"hljs-keyword\">set</span> wildmenu\n<span class=\"hljs-comment\">\" Optionally ignore bulky folders:</span>\n<span class=\"hljs-keyword\">set</span> wildignore+=*/node_modules/*</code></pre></div>\n<p>Weâ€™ve just set up quick file search! Tab completion now finds files deep in current working directory. For example, <code>:find foobar&lt;Tab&gt;</code> or <code>:find *.ht&lt;Tab&gt;</code> will both find <code>some/nested/dir/foobarbaz.html</code>. If multiple files match, the <em>wildmenu</em> we just enabled appears on top on the command line and more <code>&lt;Tab&gt;</code> presses rotate across matches.</p></section>\n<section class=\"doc-section level-2\"><h3 id=\"_explore_files\">Explore files</h3><p>Running <strong><code>:find</code> on a folder</strong> opens <em>netrw</em>, a simple yet efficient file explorer. It provides a tree view if you hit <code>l</code> a few times! You can also create a new file by hitting <code>%</code>, delete with <code>D</code> and rename with <code>R</code>. Using <code>:find</code> alone goes to current fileâ€™s directory and <code>:find .</code> goes to current working directory.</p></section>\n<section class=\"doc-section level-2\"><h3 id=\"_navigating_across_buffers\">Navigating across buffers</h3><p>A developerâ€™s workflow often involves going back and forth in a code base. Although <code>:find</code> or <a href=\"https://github.com/junegunn/fzf.vim\">fzf</a> are great for quickly opening files, we can go faster once they have already been opened in buffers.</p>\n<div class=\"ulist\"><ul><li><kbd class=\"keyseq\"><kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">6</kbd></kbd> swaps to last opened buffer</li><li><kbd class=\"keyseq\"><kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">o</kbd></kbd> moves the cursor to the previous location it last <em>jumped</em> from</li><li><kbd class=\"keyseq\"><kbd class=\"key\">Ctrl</kbd>+<kbd class=\"key\">i</kbd></kbd> moves the cursor to the next <em>jump</em></li></ul></div>\n<p>The two latter commands take advantage of the <a href=\"https://vim.fandom.com/wiki/Jumping_to_previously_visited_locations\">jumplist</a> which contains all cursor <em>jumps</em>, including inside the same buffer. This is much more powerful than just \"tab switching\" in other editors as you can extremely quicky jump back and forth more precise contexts. Although they are precise, they might take you more time than a simple <code>Ctrl-6</code> swap-back or than moving away with a quick <code>:find</code> or <em>fzf</em>.</p></section>\n<section class=\"doc-section level-2\"><h3 id=\"_closing_buffers\">Closing buffers</h3><p>It wonâ€™t cause any trouble to keep any number of buffers open and it is often recommended to keep them open. However, when we mainly rely on <code>Ctrl-o</code>/<code>Ctrl-i</code> to navigate, we want to keep the jumplist history clean. So if, for example, a file has been opened by mistake, all what is needed is <strong><code>:bw</code></strong>.</p></section></section>\n<section class=\"doc-section level-1\"><h2 id=\"_windows\">Windows</h2><p>Windows are viewports on a buffer. A single one takes all vimâ€™s space when launching the editor. Some commands like <code>:help anything</code> spawn a new window. <code>:q</code> closes current window or the editor when no window remain.</p>\n<p>Windows allow to split the editor, which can be done manually with <code>:split</code> and <code>:vsplit</code>. Window-controlling commands are prefixed by <code>&lt;C-w&gt;</code>. For example, <code>&lt;C-w&gt;</code> followed by a direction focuses the nearest window in that direction.</p>\n<p>As I donâ€™t need editor splits that much, I wonâ€™t get more into details. However I run vim from an instance of tmux which allows to <a href=\"https://github.com/christoomey/vim-tmux-navigator\">seamlessly navigate across split terminals and vim windows</a>, i.e. with the same shortcut: <code>&lt;C&gt;</code> plus a direction. tmux allows much more and I will write a dedicated article about it.</p>\n<hr>\n<p>Thatâ€™s all for file navigation in vim, keeping it <strong>simple and mouse-free</strong>! I still recommend to look into <a href=\"https://github.com/junegunn/fzf.vim\">fzf</a> for fuzzy finding; I bound it to <code>&lt;C-p&gt;</code> to speed up file jumps. I also recommend to install <a href=\"https://github.com/BurntSushi/ripgrep\">ripgrep</a> on your system for recursive directory text searches. <em>fzf.vim</em> automatically picks up on <em>ripgrep</em> and you just need to run <code>:Rg textOrRegex</code> to start using it.</p></section>\n<section class=\"doc-section level-1\"><h2 id=\"_cheatsheet_tldr\">Cheatsheet <em>(tl;dr)</em></h2><div class=\"table-block\"><table class=\"frame-all grid-all stretch\"><colgroup><col style=\"width: 50%;\"><col style=\"width: 50%;\"></colgroup><thead><tr><th class=\"halign-left valign-top\">In buffer</th><th class=\"halign-left valign-top\">Action</th></tr></thead><tbody><tr><td class=\"halign-left valign-top\"><strong><code>:find file</code></strong></td><td class=\"halign-left valign-top\">Open <code>file</code></td></tr><tr><td class=\"halign-left valign-top\"><strong><code>:find directory</code></strong></td><td class=\"halign-left valign-top\">Explore <code>directory</code><br>\n                        <code>:find .</code> for root directory</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>:find</code></strong></td><td class=\"halign-left valign-top\">Explore current fileâ€™s directory</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>&lt;C-6&gt;</code></strong></td><td class=\"halign-left valign-top\">Swap with previous buffer</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>&lt;C-o&gt;</code></strong></td><td class=\"halign-left valign-top\">Jump back</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>&lt;C-i&gt;</code></strong></td><td class=\"halign-left valign-top\">Jump next</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>:split</code></strong></td><td class=\"halign-left valign-top\">Split horizontally</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>:vsplit</code></strong></td><td class=\"halign-left valign-top\">Split vertically</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>&lt;C-w&gt; direction</code></strong></td><td class=\"halign-left valign-top\">Focus nearest window</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>:bw</code></strong></td><td class=\"halign-left valign-top\">Close buffer</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>:q</code></strong></td><td class=\"halign-left valign-top\">Close window</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>:help anything</code></strong></td><td class=\"halign-left valign-top\">Opens related help in a new window. Often more efficient than searching the internet!</td></tr></tbody></table></div>\n<div class=\"table-block\"><table class=\"frame-all grid-all stretch\"><colgroup><col style=\"width: 50%;\"><col style=\"width: 50%;\"></colgroup><thead><tr><th class=\"halign-left valign-top\">In <em>netrw</em></th><th class=\"halign-left valign-top\">Action</th></tr></thead><tbody><tr><td class=\"halign-left valign-top\"><strong><code>i</code></strong></td><td class=\"halign-left valign-top\">Change layout<br>\n               <em>list &gt; details &gt; ls &gt; tree</em></td></tr><tr><td class=\"halign-left valign-top\"><strong><code>%</code></strong></td><td class=\"halign-left valign-top\">New file</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>d</code></strong></td><td class=\"halign-left valign-top\">New directory</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>R</code></strong></td><td class=\"halign-left valign-top\">Rename file</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>D</code></strong></td><td class=\"halign-left valign-top\">Delete file</td></tr></tbody></table></div>\n<div class=\"table-block\"><table class=\"frame-all grid-all stretch\"><colgroup><col style=\"width: 50%;\"><col style=\"width: 50%;\"></colgroup><thead><tr><th class=\"halign-left valign-top\">With plugins</th><th class=\"halign-left valign-top\">Action</th></tr></thead><tbody><tr><td class=\"halign-left valign-top\"><strong><code>&lt;C-p&gt;</code></strong></td><td class=\"halign-left valign-top\">Open <a href=\"https://github.com/junegunn/fzf.vim\">fzf</a></td></tr><tr><td class=\"halign-left valign-top\"><strong><code>&lt;C-direction&gt;</code></strong></td><td class=\"halign-left valign-top\">Focus nearest window or <em>tmux</em> pane</td></tr><tr><td class=\"halign-left valign-top\"><strong><code>:Rg textOrRegex</code></strong></td><td class=\"halign-left valign-top\">Recursive text search with <a href=\"https://github.com/BurntSushi/ripgrep\">ripgrep</a></td></tr></tbody></table></div></section>","categories":["dev"]}},"__N_SSG":true}