{"pageProps":{"locale":"fr","scope":{"date":"2020-09-01","slug":"gerer-ses-permissions-avec-docker","lang":"fr","title":"Gérer ses permissions avec Docker","html":"<section id=\"preamble\" aria-label=\"Preamble\"><p>Tout d’abord soyons d’accord sur les mots :</p>\n<div class=\"ulist\"><ul><li>L'<strong><em>hôte</em></strong> est le système d’exploitation de la machine, celui qui fait tourner Docker lui-même</li><li>Nous utiliserons <strong><em>conteneur</em></strong> pour se référer à ce qui est exécuté dans l’univers de Docker</li><li>Les <strong><em>user namespaces</em></strong>, que j’appellerai <strong><em>subuids</em></strong>, sont une fonctionnalité native Unix pour faire correspondre les ids d’utilisateurs système vers une page d’utilisateurs donnée.</li></ul></div>\n<p>L’article décrit comment utiliser les user namespaces (<em>subuids</em>) dans un environnement Unix pour réserver une plage d’utilisateurs au daemon Docker. Il est probable que Docker for Mac supporte cette fonctionnalité.</p></section><nav id=\"toc\" class=\"toc\" role=\"doc-toc\"><h2 id=\"toc-title\">Table des matières</h2><ol class=\"toc-list level-1\"><li><a href=\"#_motivation\">Motivation</a></li><li><a href=\"#_mise_en_place\">Mise en place</a><ol class=\"toc-list level-2\"><li><a href=\"#_mappings_de_dev\">Mappings de dev</a></li><li><a href=\"#_mappings_de_ciproduction\">Mappings de CI/production</a></li></ol></li><li><a href=\"#_problèmes_et_trucs_à_savoir\">Problèmes et trucs à savoir</a></li></ol></nav>\n<section class=\"doc-section level-1\"><h2 id=\"_motivation\">Motivation</h2><p>Sur l’hôte, sans configuration donnée, les fichiers manipulés par Docker appartiennent au même utilisateur que celui du conteneur. Ce n’est pas rassurant dans le sens où le daemon Docker tourne en <code>root</code> par défaut et que les conteneurs ne sont pas tenus de s’exécuter en tant que l’utilisateur qui leur a été donné en configuration.</p>\n<figure class=\"example-block\"><figcaption>Exemple :</figcaption>\n<div class=\"example\">Les images <code>postgres</code> et <code>mysql</code> écrivent d’elles-mêmes une partie de leurs fichiers avec les les utilisateurs de PostgreSQL et MySQL.</div></figure>\n<p>Pour éviter ce problème, nous allons indiquer au daemon Docker à quels utilisateurs hôte correspondent tous les utilisateurs des conteneurs.</p></section>\n<section class=\"doc-section level-1\"><h2 id=\"_mise_en_place\">Mise en place</h2><h5 id=\"_configuration_hôte_impactée\" class=\"discrete\">Configuration hôte impactée :</h5>\n<div class=\"ulist\"><ul><li><code>/etc/subuid</code> - configuration des mappings utilisateur hôte ⇐⇒ conteneur</li><li><code>/etc/subgid</code> - configuration des mappings groupe hôte ⇐⇒ conteneur</li><li><code>/etc/docker/daemon.json</code> - configuration du daemon Docker</li></ul></div>\n<p>Selon moi, c’est avantageux de configurer différemment ces mappings sur les machines des développeurs et en CI/production. En effet : autant tirer profit de cette flexibilité pour développer confortablement tout en gardant la production sous contrôle.</p>\n<section class=\"doc-section level-2\"><h3 id=\"_mappings_de_dev\">Mappings de dev</h3><p>En mappant le <code>root</code> des conteneurs vers ton utilisateur hôte, tu peux simplement profiter d’une transparence de permissions par défaut. Plus de problèmes avec les volumes générés en <code>root</code> hôte puis crashant l’exécution à cause de la mauvaise permission !</p>\n<p>Pour ma part, je map simplement <code>root</code> vers mon user hôte puis tous les autres uids 1+ vers 100001+ sur l’hôte.</p>\n<p>La seule chose à confirmer : l’id de ton utilisateur hôte. C’est souvent 1000 et c’est vérifiable en exécutant <code>id -u</code>.</p>\n<h5 id=\"_etcsubuid\" class=\"discrete\">/etc/subuid</h5>\n<div class=\"listing-block\"><pre class=\"highlightjs highlight\"><code class=\"language-none hljs\">dockremap:1000:1\ndockremap:100001:65536</code></pre></div>\n<h5 id=\"_explication\" class=\"discrete\">Explication</h5>\n<p>Un mapping nommé <code>dockremap</code> est créé :</p>\n<div class=\"ulist\"><ul><li><em>1e ligne :</em> assigne 1 utilisateur (de conteneur pour nous) vers l’uid 1000. Ce 1e utilisateur est l’utilisateur 0, donc <code>root</code>.</li><li><em>2e ligne :</em> assigne les 65536 prochains utilisateurs vers la plage commençant par 100001, donc vers 100001-165536. Par exemple, l’utilisateur conteneur 66 sera manipulé sur l’hôte comme étant l’utilisateur 100066.</li></ul></div>\n<p>Je pense qu’appliquer le même principe pour les groupes est tout aussi profitable : la transparence est totale. On peut vérifier son <code>gid</code> avec <code>id -g</code>.</p>\n<h5 id=\"_etcsubgid\" class=\"discrete\">/etc/subgid</h5>\n<div class=\"listing-block\"><pre class=\"highlightjs highlight\"><code class=\"language-none hljs\">dockremap:1000:1\ndockremap:100001:65536</code></pre></div>\n<h5 id=\"_etcdockerdaemon_json\" class=\"discrete\">/etc/docker/daemon.json</h5>\n<div class=\"listing-block\"><pre class=\"highlightjs highlight\"><code class=\"language-json hljs\" data-lang=\"json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"userns-remap\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"dockremap\"</span>\n<span class=\"hljs-punctuation\">}</span></code></pre></div>\n<p>N’oublie pas de redémarrer le daemon docker pour que cela prenne effet 😉</p>\n<div class=\"listing-block\"><pre class=\"highlightjs highlight\"><code class=\"language-bash hljs\" data-lang=\"bash\">sudo service docker restart</code></pre></div></section>\n<section class=\"doc-section level-2\"><h3 id=\"_mappings_de_ciproduction\">Mappings de CI/production</h3><p>En production, la configuration dépend davantage des permissions que tu veux donner à tes conteneurs. On est davantage sur des problématiques de sécurité que de praticité.</p>\n<p>Il est possible d’appliquer le même type de configuration que précédemment à condition de bien connaître les conséquences du mapping, en particulier pour l’utilisateur 0.</p></section></section>\n<section class=\"doc-section level-1\"><h2 id=\"_problèmes_et_trucs_à_savoir\">Problèmes et trucs à savoir</h2><p>Il est possible de mapper plusieurs utilisateurs spécifiques conteneur vers des utilisateurs spécifiques hôte. Par exemple :</p>\n<div class=\"listing-block\"><pre class=\"highlightjs highlight\"><code class=\"language-none hljs\">dockremap:1000:1\ndockremap:100001:65\ndockremap:666:1\ndockremap:100067:65469</code></pre></div>\n<p>Ce qui peut se lire : map 0 conteneur vers 1000 hôte, map les 65 utilisateurs suivants sur la plage hôte commençant par 100001, map le suivant (66) vers 666 sur l’hôte, map le reste sur la plage hôte commençant par 100067.</p>\n<hr>\n<p>J’espère que cet article t’aura éclairé sur l’utilisation des <em>user namespaces</em> pour gérer ses permissions Docker. Il s’agit d’un retour d’expérience personnelle et de mes avis sur le sujet. N’hésite pas à explorer par toi-même, faire ta propre configuration et <a href=\"/fr/about/\">me la partager</a> 🙂</p></section>","categories":["devops"]}},"__N_SSG":true}